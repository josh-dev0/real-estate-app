import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { useState } from 'react';
import type { IRange } from '@app/types';
import { useGetPostQuery } from '@app/graphql/types'
import {
  AgencyCard,
  DealType,
  Filterbar,
  Footer,
  Searchbar,
  PropertyCard,
  PropertyCarousel,
  Statusbar,
} from '@app/components';
import type { SegmentedValue } from 'antd/lib/segmented';
import { random } from '@app/utils';
import styles from '@app/styles/pages/Test.module.scss'

const Home: NextPage = () => {
  const { data, error, loading } = useGetPostQuery();
  const [radius, setRadius] = useState<number | string | null>();
  const [bedrooms, setBedrooms] = useState<number | string | null>();
  const [propertyType, setPropertyType] = useState<string[]>();
  const [priceRange, setPriceRange] = useState<IRange>();
  const [habitableSurface, setHabitableSurface] = useState<IRange>();
  const [landSurface, setLandSurface] = useState<IRange>();
  const [showNoImageResults, setShowNoImageResults] = useState(false);
  const [dealType, setDealType] = useState();
  // Filterbar
  const [found, setFound] = useState<any>({
    total: 435,
    seniority: 226,
    rate: 205,
    serviceType: 226,
    region: 176,
    location: 176,
  });
  const [isSeniority, setIsSeniority] = useState(true);
  const [rate, setRate] = useState<number>(3.3);
  const [serviceType, setServiceType] = useState<string[]>([]);
  const [serviceTypeOptions, setServiceTypeOptions] = useState<any[]>([
    { key: 'key1', label: 'Service Type I' },
    { key: 'key2', label: 'Service Type II' },
    { key: 'key3', label: 'Service Type III' },
    { key: 'key4', label: 'Service Type IV' },
    { key: 'key5', label: 'Service Type V' },
    { key: 'key6', label: 'Service Type VI' },
    { key: 'key7', label: 'Service Type VII' },
    { key: 'key8', label: 'Service Type VIII' },
    { key: 'key9', label: 'Service Type IX' },
    { key: 'key10', label: 'Service Type X' },
  ]);
  const [region, setRegion] = useState<string[]>([]);
  const [regionOptions, setRegionOptions] = useState<any[]>([
    { key: 'key1', label: 'Region I' },
    { key: 'key2', label: 'Region II' },
    { key: 'key3', label: 'Region III' },
    { key: 'key4', label: 'Region IV' },
    { key: 'key5', label: 'Region V' },
    { key: 'key6', label: 'Region VI' },
    { key: 'key7', label: 'Region VII' },
    { key: 'key8', label: 'Region VIII' },
    { key: 'key9', label: 'Region IX' },
    { key: 'key10', label: 'Region X' },
  ]);
  const [location, setLocation] = useState<string[]>([]);
  const [locationOptions, setLocationOptions] = useState<any[]>([
    { key: 'key1', label: 'Location I' },
    { key: 'key2', label: 'Location II' },
    { key: 'key3', label: 'Location III' },
    { key: 'key4', label: 'Location IV' },
    { key: 'key5', label: 'Location V' },
    { key: 'key6', label: 'Location VI' },
    { key: 'key7', label: 'Location VII' },
    { key: 'key8', label: 'Location VIII' },
    { key: 'key9', label: 'Location IX' },
    { key: 'key10', label: 'Location X' },
  ]);
  // Status Bar
  const [statusbarViewMode, setStatusbarViewMode] = useState<SegmentedValue>('list');
  const [keyword, setKeyword] = useState('');
  const [sortBy, setSortBy] = useState('relevance');
  const [sortByOptions, setSortByOptions] = useState([
    { value: 'relevance', label: 'Relevance' },
    { value: 'featured', label: 'Featured' },
    { value: 'newlyAdded', label: 'Newly Added' },
    { value: 'date', label: 'Date' },
    { value: 'lowestPrice', label: 'Lowest Price' },
    { value: 'highestPrice', label: 'Highest Price' },
  ]);


  return (
    <>
      <Head>
        <title>Test Components Now</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>

        <h1 className={styles.title}>
          Welcome to <a className="text-test" href="https://nextjs.org">Next.js!</a>
        </h1>
        <Statusbar
          viewMode={statusbarViewMode}
          onViewModeChange={setStatusbarViewMode}
          keyword={keyword}
          onKeywordChange={setKeyword}
          sortBy={sortBy}
          onSortByChange={setSortBy}
          sortByOptions={sortByOptions}
        />

        <DealType
          className="mt-8"
          value={dealType}
          onChange={e => setDealType(e.target.value)}
        />

        <Searchbar
          locationOptions={[
            'location A',
            'location B',
            'location C',
            'location AA',
            'location BB',
            'location CC',
            'location AAA',
            'location BBB',
            'location CCC',
          ]}
          onLocationSearch={console.log}
          radius={radius}
          onRadiusChange={(val) => setRadius(val)}
          bedrooms={bedrooms}
          onBedroomsChange={val => setBedrooms(val)}
          propertyType={propertyType}
          onPropertyTypeChange={val => setPropertyType(val)}
          price={priceRange}
          onPriceChange={setPriceRange}
          includeResultsWithoutPictures={showNoImageResults}
          onChangeOfIncludeResultsWithoutPictures={setShowNoImageResults}
          habitableSurface={habitableSurface}
          onHabitableSurfaceChange={setHabitableSurface}
          landSurface={landSurface}
          onLandSurfaceChange={setLandSurface}
        />
        <div className="flex items-start gap-[1rem]">
          <Filterbar
            data={found}
            isSeniority={isSeniority}
            onIsSeniorityChange={setIsSeniority}
            rate={rate}
            onRateChange={setRate}
            serviceType={serviceType}
            serviceTypeOptions={serviceTypeOptions}
            onServiceTypeChange={setServiceType}
            region={region}
            regionOptions={regionOptions}
            onRegionChange={setRegion}
            location={location}
            locationOptions={locationOptions}
            onLocationChange={setLocation}
          />

          <PropertyCard
            title="Penthouse in Howald"
            image="/images/card-image.png"
            price={865000}
            bedrooms={3}
            surface={450}
            review={4.5}
            loading={false}
          />

          <AgencyCard
            avatar="/images/user.png"
            company="Deco-home Inc"
            name="Neudorf"
            rate={4.6}
            summary="A tout juste cinq minutes du quartier des nutes du quartier des..."
          />
        </div>

        <PropertyCarousel
          label="Properties around me"
          properties={new Array(10).fill(null).map((_, i) => ({
            title: "Penthouse in Howald" + (i + 1),
            image: "/images/card-image.png",
            price: random(765000, 865000),
            bedrooms: random(2, 10),
            surface: random(300, 450),
            review: random(2, 5),
            loading: false,
          }))}
        />

        <p className={styles.description}>
          {loading && "Loading"}
          {error && "Error happened!"}
          {!loading && !error && "Data loaded successfully"}
        </p>

        <div className={styles.grid}>
          {data && data.getPosts?.map(post => (
            <a
              key={post?.id}
              href="https://nextjs.org/docs"
              className={styles.card}
            >
              <p>id: {post?.id}</p>
              <p>{post?.body}</p>
            </a>
          ))}
        </div>
      </main>

      <Footer />
    </>
  )
}

export default Home
